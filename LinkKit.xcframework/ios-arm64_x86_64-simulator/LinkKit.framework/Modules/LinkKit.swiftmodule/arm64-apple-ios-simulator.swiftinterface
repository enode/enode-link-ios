// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name LinkKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CoreBluetooth
import Foundation
@_exported import LinkKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LinkResult {
  case success
  case failure(LinkKit.LinkError)
}
public typealias HumanReadableMessage = Swift.String
public enum LinkError : Swift.Error {
  case unknown
  case missingLinkToken
  case malformedLinkToken(LinkKit.MalformedLinkTokenError)
  case dismissedViaDismissFunction
  case cancelledByUser
  case backendError(LinkKit.HumanReadableMessage)
  case earlyExitRequestedFromFrontend(LinkKit.HumanReadableMessage?)
}
public enum MalformedLinkTokenError : Swift.Error {
  case couldNotCreateDataFromTheToken
  case couldNotParseJsonFromTheToken
  case jsonDeserializationError(LinkKit.HumanReadableMessage)
  case couldNotParseLinkUrlAndRedirectUriFromTheToken
  case couldNotCreateURLFromLinkUrl
  case couldNotFindHostFromLinkURL
  case hostOfLinkURLIsNotEnodecomOrEnodeio
}
public enum LinkResultCode : Swift.String {
  case success
  case unknown
  case missingLinkToken
  case malformedLinkToken
  case dismissedViaDismissFunction
  case cancelledByUser
  case backendError
  case earlyExitRequestedFromFrontend
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias DismissLinkUIFunction = () -> Swift.Void
@discardableResult
public func show(fromViewController: UIKit.UIViewController, linkToken: Swift.String, completion: ((LinkKit.LinkResult) -> Swift.Void)? = nil, presentationStyle: LinkKit.PresentationStyle) -> LinkKit.DismissLinkUIFunction
@discardableResult
public func show(fromViewController: UIKit.UIViewController, linkToken: Swift.String, completion: ((LinkKit.LinkResultCode, LinkKit.HumanReadableMessage?) -> Swift.Void)? = nil, presentationStyle: LinkKit.PresentationStyle) -> LinkKit.DismissLinkUIFunction
public enum PresentationStyle {
  case pageSheet
  case fullScreen
  public static func == (a: LinkKit.PresentationStyle, b: LinkKit.PresentationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class Handler {
  public init(linkToken: Swift.String, presentationStyle: LinkKit.PresentationStyle = .pageSheet, completionHandler: ((LinkKit.LinkResult) -> Swift.Void)?)
  public init(linkToken: Swift.String, presentationStyle: LinkKit.PresentationStyle = .pageSheet, completionHandler: ((LinkKit.LinkResultCode, LinkKit.HumanReadableMessage?) -> Swift.Void)?)
  public func dismiss()
  public func present(from viewController: UIKit.UIViewController)
  @objc deinit
}
public func linkKitVersion() -> Swift.String
public struct LinkToken {
}
@_Concurrency.MainActor @preconcurrency public struct LinkKitSheetModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, linkToken: Swift.String, presentationStyle: LinkKit.PresentationStyle, completionHandler: ((LinkKit.LinkResult) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func body(content: LinkKit.LinkKitSheetModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7LinkKit0aB13SheetModifierV4body7contentQr7SwiftUI05_ViewD8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func linkKitSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, linkToken: Swift.String, completionHandler: @escaping (LinkKit.LinkResult) -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func linkKitFullscreen(isPresented: SwiftUICore.Binding<Swift.Bool>, linkToken: Swift.String, completionHandler: @escaping (LinkKit.LinkResult) -> Swift.Void) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct LinkKitSheet : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(linkToken: Swift.String, presentationStyle: LinkKit.PresentationStyle, completionHandler: @escaping (LinkKit.LinkResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: LinkKit.LinkKitSheet.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: LinkKit.LinkKitSheet.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIViewController
}
extension LinkKit.LinkResultCode : Swift.Equatable {}
extension LinkKit.LinkResultCode : Swift.Hashable {}
extension LinkKit.LinkResultCode : Swift.RawRepresentable {}
extension LinkKit.PresentationStyle : Swift.Equatable {}
extension LinkKit.PresentationStyle : Swift.Hashable {}
extension LinkKit.LinkKitSheetModifier : Swift.Sendable {}
extension LinkKit.LinkKitSheet : Swift.Sendable {}
